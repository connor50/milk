############# MILK ####################

Design
	
	News in python. 
		After scouring the web and discovering the News API, I thought that a dynamic web based app would be the best way to implement, 
		a news-filtering website. Drawing inspiration from my solution to Sentiments PSET, I decided to reimplement that concept
		in python for the current news rather than a user's tweets.
		The web app also dynamically resizes so can be viewed on mobile as well. This seemed the best fit for the final project.
		
	Design guidelines
		Generally, I wanted to implement a super clean design throughout this project. So intended to keep it as minimalist as possible. 
		This meant stripping away a lot of information and designing the HTML and CSS in such a way to keep the website functional 
		but very clean. Basic colours and a lot of padding were essential in this design. 
		
	getnews()
		Instead of making a separate function for each type of milk, I decided to let getnews() function to allow any type of milk
		to be passed into it and it return a JSON list of that filtered news. This invovled some JSON manipulation and cleaning up of 
		any corrupt or 'none' data. 
	
	sendemail()
		Another function that handles all of the emailing part of the web app. By calling this function it will email (using flask-mail) 
		all of the users their specific requested type of milk. I decided to store user data in a SQL database for permanent storage.
		Then the sendemail using a gmail email service to send out emails to all users and renders a different HTML template for each
		user. 
	
	Safe SQL
		Used :name style of variable inclusion in the code such as below:
			db.execute("SELECT * FROM users WHERE email = :email", email=request.form.get("email"))
		to avoid sql injection, and malicious code. I also performed server side sql database checks to avoid people disabling 
		Javascript and then the code entered into the sql database. 
	
	How would I get the emails to send every 24 hrs?
		Ah. A contentious issue, and one that would take some time to solve. Perhaps one of the trickiest parts of the task. 
		A cron job was the most obvious solution but would be difficult as it would not be able to run in one file. Celery periodic
		tasks was the online solution in python, but that also didn't feel quite right. Finally, I decided that by using the get request
		on the landing page, and a date.txt file, I could make the users instatiate the check to see if they had been emailed. As each time 
		a user visits the site it checks to see the last time everyone has been emailed. Then if 24hrs have elapsed it goes ahead and sends all
		the current news to the user in different emails and formatting depending on their milk style. Then it updates the time in the txt file.
	
	Dynamic resizing
		This involved a lot of research and some fancy CSS. Using calc(VW+ VH) was a useful tool in allowing elements to dynamically resize.
		Also  image css involved using percentages rather than fixed values. 
	
	
		

	